 pipeline {
    agent any

    stages {


        stage('Maven clean install') {
            steps {
sh "mvn clean install -Dmaven.test.skip=true"            }
        }

stage('Run Unit Tests with Mockito') {
            steps {
                sh 'mvn test' // Ex√©cutez les tests unitaires avec Mockito en utilisant Maven
                // Utilisez 'gradle test' pour les projets Gradle
            }
        }
 

        // Add more stages as needed
    stage('Build Docker Image') {
                          steps {
                              script {
                                sh 'docker build -t wassimbecheikh/skistation:1.02 .       '
                              }
                          }
                      }

                      stage('login dockerhub') {
                                            steps {
    				sh 'docker login -u wassimbecheikh --password 213JMT6649'
                                                }
    		  }
  stage('Taging Docker Image') {
                                            steps {
                                       sh ' docker tag skistation  wassimbecheikh/skistation:1.02       '
                                                }
    		  }
    	                      stage('Push Docker Image') {
                                            steps {
                                       sh 'docker push wassimbecheikh/skistation:1.02   '
                                                }
    		  }


    		   stage('Run Spring && MySQL Containers') {
                                    steps {
                                        script {
                                          sh 'docker-compose up -d'
                                        }
                                    }
                                }


stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv(installationName:'SonarQ') {
                    sh 'mvn sonar:sonar' //  ./chmod +x mvnw  clean org.sonarsource.scanner.maven:sonar-maven-plugin:3.9.0.2155:sonar
                }
            }
        }


    }
post {
    always {
       cleanWs()
    }
}


    }
